// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Profile {
  id         Int          @id @default(autoincrement())
  name       String
  photoURL   String?      @map("photo_url")
  tagline    String?
  bio        String?
  email      String       @unique
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  Experience Experience[]
  Links      Link[]
  Skills     Skill[]
  Education  Education[]

  @@index([email], name: "email")
  @@map(name: "profiles")
}

model Experience {
  id                  Int                   @id @default(autoincrement())
  title               String
  company             String
  remote              Boolean
  location            String
  startDate           DateTime              @map("start_date")
  endDate             DateTime?             @map("end_date")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  profileId           Int
  Profile             Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  SkillsOnExperiences SkillsOnExperiences[]

  @@map(name: "experiences")
}

model Education {
  id        Int       @id @default(autoincrement())
  school    String
  degree    String
  field     String
  minors    String?
  startDate DateTime  @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  profileId Int       @map("profile_id")
  Profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map(name: "educations")
}

model Link {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profileId Int      @map("profile_id")
  Profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map(name: "links")
}

model Skill {
  id                  Int                   @id @default(autoincrement())
  name                String
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  profileId           Int                   @map("profile_id")
  Profile             Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  SkillsOnExperiences SkillsOnExperiences[]

  @@map(name: "skills")
}

model SkillsOnExperiences {
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  experienceId Int        @map("experience_id")
  skillId      Int        @map("skill_id")

  @@id([experienceId, skillId])
  @@map(name: "skills_on_experiences")
}
